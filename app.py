import ast
import logging
import os
import random
import string
import sqlite3
import qrcode
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters

# ===== CONFIG =====
load_dotenv()

BOT_TOKEN = os.getenv('BOT_TOKEN')
CHANNEL_USERNAME = os.getenv('CHANNEL_USERNAME')
ADMIN_USER_NAMES = ast.literal_eval(os.getenv('ADMIN_USER_NAMES'))
DATABASE_NAME = os.getenv('DATABASE_NAME')


# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–æ–≤
CODE_LENGTH = 8
CODE_PREFIX = "DC"
DISCOUNT_TEMPLATE = "10%"

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)


# ===== DATABASE FUNCTIONS =====
def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect(DATABASE_NAME)
    cur = conn.cursor()
    cur.execute('''
        CREATE TABLE IF NOT EXISTS promo_codes (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            code TEXT UNIQUE NOT NULL,
            discount_value TEXT NOT NULL,
            is_used BOOLEAN NOT NULL DEFAULT FALSE,
            created_at DATETIME NOT NULL,
            used_at DATETIME,
            issued_to TEXT NOT NULL,
            issued_at DATETIME,
            used_by TEXT DEFAULT NULL
        )
    ''')
    conn.commit()
    conn.close()


def generate_unique_code():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–æ-–∫–æ–¥"""
    while True:
        random_part = ''.join(random.choices(string.ascii_uppercase + string.digits, k=CODE_LENGTH))
        code = f"{CODE_PREFIX}{random_part}" if CODE_PREFIX else random_part

        conn = sqlite3.connect(DATABASE_NAME)
        cur = conn.cursor()
        cur.execute('SELECT id FROM promo_codes WHERE code = ?', (code,))
        exists = cur.fetchone()
        conn.close()

        if not exists:
            return code


def create_promo_code_for_user(user_name):
    """–°–æ–∑–¥–∞–µ—Ç –∏ –≤—ã–¥–∞–µ—Ç –ø—Ä–æ–º–æ-–∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    MAX_ATTEMPTS = 10
    attempts = 0

    while attempts < MAX_ATTEMPTS:
        code = generate_unique_code()
        conn = None

        try:
            conn = sqlite3.connect(DATABASE_NAME)
            cur = conn.cursor()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–¥ (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
            cur.execute('SELECT id FROM promo_codes WHERE code = ?', (code,))
            if cur.fetchone():
                logging.warning(f"–ö–æ–¥ {code} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î (–∫–æ–ª–ª–∏–∑–∏—è)")
                attempts += 1
                continue

            # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–æ–¥
            cur.execute('''
                INSERT INTO promo_codes (code, discount_value, created_at, issued_to, issued_at)
                VALUES (?, ?, ?, ?, ?)
            ''', (code, DISCOUNT_TEMPLATE, datetime.now(), user_name, datetime.now()))
            conn.commit()

            logging.info(f"–£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –ø—Ä–æ–º–æ-–∫–æ–¥ {code} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name}")
            return code, DISCOUNT_TEMPLATE

        except sqlite3.IntegrityError as e:
            if conn:
                conn.rollback()
            logging.error(f"IntegrityError: {e}")

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
            error_msg = str(e)
            if "UNIQUE constraint failed: promo_codes.code" in error_msg:
                logging.warning(f"–ö–æ–ª–ª–∏–∑–∏—è –∫–æ–¥–∞ {code} - –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞")
                attempts += 1
            elif "NOT NULL constraint failed" in error_msg:
                logging.error("–û—à–∏–±–∫–∞ NOT NULL constraint")
                return None, None
            else:
                logging.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏: {e}")
                return None, None

        except Exception as e:
            if conn:
                conn.rollback()
            logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–¥–∞: {e}")
            return None, None

        finally:
            if conn:
                conn.close()

    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø–æ—Å–ª–µ {MAX_ATTEMPTS} –ø–æ–ø—ã—Ç–æ–∫")
    return None, None


def has_user_received_code(user_name):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–ª—É—á–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–æ–¥ —Ä–∞–Ω–µ–µ"""
    conn = sqlite3.connect(DATABASE_NAME)
    cur = conn.cursor()
    cur.execute('SELECT code FROM promo_codes WHERE issued_to = ?', (user_name,))
    result = cur.fetchone()
    conn.close()
    return result is not None


def apply_promo_code(code, applied_by_user_id=None):
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –ø—Ä–æ–º–æ-–∫–æ–¥ (–æ—Ç–º–µ—á–∞–µ—Ç –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π)"""
    conn = sqlite3.connect(DATABASE_NAME)
    cur = conn.cursor()

    cur.execute('''
        SELECT id, is_used, discount_value, issued_to 
        FROM promo_codes WHERE code = ?
    ''', (code,))
    result = cur.fetchone()

    if not result:
        conn.close()
        return False, "–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω"

    code_id, is_used, discount_value, issued_to = result

    if not issued_to:
        conn.close()
        return False, "–ö–æ–¥ –Ω–µ –±—ã–ª –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"

    if is_used:
        conn.close()
        return False, "–ö–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω"

    # –ü–æ–º–µ—á–∞–µ–º –∫–æ–¥ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
    cur.execute('''
        UPDATE promo_codes 
        SET is_used = TRUE, used_at = ?, used_by = ?
        WHERE code = ?
    ''', (datetime.now(), applied_by_user_id, code))
    conn.commit()
    conn.close()

    return True, f"‚úÖ –ö–æ–¥ '{code}' –Ω–∞ —Å–∫–∏–¥–∫—É {discount_value} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω!"


def get_code_info(code):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–¥–µ"""
    conn = sqlite3.connect(DATABASE_NAME)
    cur = conn.cursor()
    cur.execute('''
        SELECT code, discount_value, is_used, created_at, issued_to, used_at, used_by
        FROM promo_codes WHERE code = ?
    ''', (code,))
    result = cur.fetchone()
    conn.close()
    return result


# ===== QR CODE GENERATION =====
def generate_qr_code(data, filename="qrcode.png"):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞"""
    qr = qrcode.QRCode(
        version=1,
        error_correction=qrcode.constants.ERROR_CORRECT_L,
        box_size=10,
        border=4,
    )
    qr.add_data(data)
    qr.make(fit=True)
    img = qr.make_image(fill_color="black", back_color="white")
    img.save(filename)
    return filename


# ===== TELEGRAM BOT FUNCTIONS =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    user_name = user.name

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = [
        [InlineKeyboardButton("üéÅ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–æ-–∫–æ–¥", callback_data="get_promo")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
    ]
    if user_name in ADMIN_USER_NAMES:
        keyboard.append([InlineKeyboardButton("üì± –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥", callback_data="scan_qr")],)
        keyboard.append([InlineKeyboardButton("üëë –ê–¥–º–∏–Ω-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")])

    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
        "–Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ-–∫–æ–¥–∞–º–∏.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )


async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (–¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR-–∫–æ–¥–æ–≤)"""
    user = update.effective_user
    photo = update.message.photo[-1]  # –ë–µ—Ä–µ–º —Å–∞–º—É—é –±–æ–ª—å—à—É—é –≤–µ—Ä—Å–∏—é —Ñ–æ—Ç–æ

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
    photo_file = await photo.get_file()
    photo_path = f"temp_photo_{user.id}.jpg"
    await photo_file.download_to_drive(photo_path)

    # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å QR-–∫–æ–¥
    qr_text = read_qr_code_from_image(photo_path)

    if qr_text:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–¥
        success, message = apply_promo_code(qr_text, user.name)
        await update.message.reply_text(message)

        # –ï—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        if user.name in ADMIN_USER_NAMES:
            code_info = get_code_info(qr_text)
            if code_info:
                code, discount, is_used, created, issued_to, used_at, used_by = code_info
                info_text = f"""
üìã –î–µ—Ç–∞–ª–∏ –∫–æ–¥–∞:
‚Ä¢ –ö–æ–¥: {code}
‚Ä¢ –°–∫–∏–¥–∫–∞: {discount}
‚Ä¢ –°—Ç–∞—Ç—É—Å: {'–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω' if is_used else '–ê–∫—Ç–∏–≤–µ–Ω'}
‚Ä¢ –°–æ–∑–¥–∞–Ω: {created}
‚Ä¢ –í—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {issued_to}
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω: {used_at if used_at else '–ï—â–µ –Ω–µ—Ç'}
                """
                await update.message.reply_text(info_text)
    else:
        await update.message.reply_text(
            "‚ùå QR-–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–æ—Ç–æ —á–µ—Ç–∫–æ–µ –∏ –∫–æ–¥ —Ö–æ—Ä–æ—à–æ –≤–∏–¥–µ–Ω.")


def read_qr_code_from_image(image_path):
    """–ß–∏—Ç–∞–µ—Ç QR-–∫–æ–¥ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        import cv2
        from pyzbar.pyzbar import decode

        img = cv2.imread(image_path)
        decoded_objects = decode(img)

        if decoded_objects:
            return decoded_objects[0].data.decode('utf-8')
        return None
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ QR-–∫–æ–¥–∞: {e}")
        return None


async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∫–æ–¥–æ–≤)"""
    user = update.effective_user
    if user is None:
        return
    text = update.effective_message.text.strip()
    if user.name in ADMIN_USER_NAMES:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –ø—Ä–æ–º–æ-–∫–æ–¥ (—Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–µ—Ñ–∏–∫—Å –∏–ª–∏ –Ω—É–∂–Ω—É—é –¥–ª–∏–Ω—É)
        if (CODE_PREFIX and text.startswith(CODE_PREFIX)) or len(text) == (len(CODE_PREFIX) + CODE_LENGTH):
            success, message = apply_promo_code(text, user.name)
            await update.message.reply_text(message)

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∞
            if user.name in ADMIN_USER_NAMES and success:
                code_info = get_code_info(text)
                if code_info:
                    code, discount, is_used, created, issued_to, used_at, used_by = code_info
                    info_text = f"""
    üìã –î–µ—Ç–∞–ª–∏ –∫–æ–¥–∞:
    ‚Ä¢ –ö–æ–¥: {code}
    ‚Ä¢ –°–∫–∏–¥–∫–∞: {discount}
    ‚Ä¢ –°—Ç–∞—Ç—É—Å: {'–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω' if is_used else '–ê–∫—Ç–∏–≤–µ–Ω'}
    ‚Ä¢ –°–æ–∑–¥–∞–Ω: {created}
    ‚Ä¢ –í—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {issued_to}
                    """
                    await update.message.reply_text(info_text)
        else:
            await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ QR-–∫–æ–¥ –∏–ª–∏ –ø—Ä–æ–º–æ-–∫–æ–¥ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏")
    else:
        await update.message.reply_text("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥")

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()

    user = query.from_user
    data = query.data

    if data == "get_promo":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∏ –≤—ã–¥–∞–µ–º –∫–æ–¥
        try:
            chat_member = await context.bot.get_chat_member(CHANNEL_USERNAME, user.id)
            if chat_member.status in ['member', 'administrator', 'creator']:
                if has_user_received_code(user.name):
                    await query.edit_message_text("–í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ —Å–≤–æ–π –ø—Ä–æ–º–æ-–∫–æ–¥! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É!")
                else:
                    code, discount_value = create_promo_code_for_user(user.name)
                    if code is None:
                        await query.edit_message_text('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞ \U0001F612')
                    else:
                        qr_filename = generate_qr_code(code)
                        caption = f"üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –í–∞—à –ø—Ä–æ–º–æ-–∫–æ–¥ –Ω–∞ —Å–∫–∏–¥–∫—É {discount_value}.\n–ü–æ–∫–∞–∂–∏—Ç–µ —ç—Ç–æ—Ç QR-–∫–æ–¥ –Ω–∞ –∫–∞—Å—Å–µ."

                        with open(qr_filename, 'rb') as qr_photo:
                            await context.bot.send_photo(
                                chat_id=user.id,
                                photo=qr_photo,
                                caption=caption
                            )
                        await query.edit_message_text(
                            f"*–í–∞—à –∫–æ–¥:* `{code}`\n–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –µ–≥–æ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ QR-–∫–æ–¥ –Ω–µ –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–µ—Ç—Å—è.",
                            parse_mode='Markdown'
                        )
            else:
                keyboard = [[InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/{CHANNEL_USERNAME[1:]}")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(
                    "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–æ-–∫–æ–¥, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!",
                    reply_markup=reply_markup
                )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    elif data == "scan_qr":
        await query.edit_message_text(
            "üì± –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ QR-–∫–æ–¥–∞ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.\n\n"
            "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n"
            "‚Ä¢ QR-–∫–æ–¥ —Ö–æ—Ä–æ—à–æ –æ—Å–≤–µ—â–µ–Ω\n"
            "‚Ä¢ –ó–∞–Ω–∏–º–∞–µ—Ç –±–æ–ª—å—à—É—é —á–∞—Å—Ç—å —Ñ–æ—Ç–æ\n"
            "‚Ä¢ –ù–µ —Ä–∞–∑–º—ã—Ç –∏ –Ω–µ –ø–µ—Ä–µ–∫–æ—à–µ–Ω"
        )

    elif data == "help" and user.name in ADMIN_USER_NAMES:
        help_text = """
ü§ñ **–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É**

**–î–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤:**
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ ¬´–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–æ-–∫–æ–¥¬ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–∏–¥–∫–∏
‚Ä¢ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, –µ—Å–ª–∏ –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã
‚Ä¢ –ü–æ–∫–∞–∂–∏—Ç–µ QR-–∫–æ–¥ –Ω–∞ –∫–∞—Å—Å–µ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–∫–∏–¥–∫–∏

**–î–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∞:**
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ QR-–∫–æ–¥–∞ –∏–ª–∏ —Å–∞–º –∫–æ–¥ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
‚Ä¢ –ö–æ–¥ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π

**–§–æ—Ä–º–∞—Ç –∫–æ–¥–∞:** {CODE_PREFIX} + {CODE_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤
        """.format(CODE_PREFIX=CODE_PREFIX, CODE_LENGTH=CODE_LENGTH)
        await query.edit_message_text(help_text, parse_mode='Markdown')
    elif data == "help":
        help_text = """
        ü§ñ **–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É**
        ‚Ä¢ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, –µ—Å–ª–∏ –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã
        ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ ¬´–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–æ-–∫–æ–¥¬ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–∏–¥–∫–∏
        ‚Ä¢ –ü–æ–∫–∞–∂–∏—Ç–µ QR-–∫–æ–¥ –Ω–∞ –∫–∞—Å—Å–µ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–∫–∏–¥–∫–∏
        """
        await query.edit_message_text(help_text, parse_mode='Markdown')
    elif user.name in ADMIN_USER_NAMES:
        if data == "admin_stats":
            await admin_stats(update, context)


async def admin_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""
    user_name = update.effective_user.name
    if user_name not in ADMIN_USER_NAMES:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    conn = sqlite3.connect(DATABASE_NAME)
    cur = conn.cursor()

    cur.execute('SELECT COUNT(*) FROM promo_codes')
    total = cur.fetchone()[0]

    cur.execute('SELECT COUNT(*) FROM promo_codes WHERE issued_to IS NOT NULL')
    issued = cur.fetchone()[0]

    cur.execute('SELECT COUNT(*) FROM promo_codes WHERE is_used = TRUE')
    used = cur.fetchone()[0]

    conn.close()

    stats_text = f"""
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–º–æ-–∫–æ–¥–æ–≤:

‚Ä¢ –í—Å–µ–≥–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {total}
‚Ä¢ –í—ã–¥–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º: {issued}
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {used}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {issued - used}

–®–∞–±–ª–æ–Ω —Å–∫–∏–¥–∫–∏: {DISCOUNT_TEMPLATE}
    """

    await update.effective_message.reply_text(stats_text)

# ===== MAIN =====
def main():
    init_db()
    application = Application.builder().token(BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("stats", admin_stats))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    application.run_polling()


if __name__ == '__main__':
    main()